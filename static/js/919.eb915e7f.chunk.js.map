{"version":3,"file":"static/js/919.eb915e7f.chunk.js","mappings":"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","sources":["components/Game/GameLayout.tsx","components/Top/GameName.tsx","components/Top/Legend.tsx","components/Top/Top.tsx","modules/GameWithHooks/useStatus.ts","modules/GameWithHooks/useTime.ts","modules/GameWithHooks/useSettings.ts","modules/GameWithHooks/GameWithHooks.tsx","modules/GameWithHooks/useGame.ts","pages/MinesweeperWithHooks/MinesweeperWithHooks.tsx"],"sourcesContent":["import { FC, ReactNode } from 'react';\nimport { GameArea } from './GameArea';\nimport { Wrapper } from './Wrapper';\n\nexport interface Props {\n  top: ReactNode;\n  children: ReactNode;\n}\n\nexport const GameLayout: FC<Props> = ({ top, children }) => (\n  <Wrapper>\n    {top}\n    <GameArea>{children}</GameArea>\n  </Wrapper>\n);\n","import styled from '@emotion/styled';\nimport { FC, ReactNode } from 'react';\n\nexport interface GameNameProps {\n  name: string;\n  children?: ReactNode;\n}\n\nconst GameNameHeader = styled.h1`\n  font-size: 2em;\n`;\n\nexport const GameName: FC<GameNameProps> = ({ name, children }) => {\n  return (\n    <GameNameHeader>\n      {name}\n      , {children}\n    </GameNameHeader>\n  );\n};\n","import React, { FC } from 'react';\nimport styled from '@emotion/styled';\n\nexport interface LegendProps {\n  feature: string;\n  firstAction: string;\n  secondAction: string;\n}\n\nexport const Parent = styled.legend`\n  font-size: 1em;\n  margin: 0 auto 2vw;\n  line-height: 1.25em;\n`;\n\nconst FlagComboParent = styled.code`\n  background: #e3e3e3;\n`;\n\nconst Feature = styled.span`\n  font-weight: 700;\n  display: inline-block;\n  margin-right: 0.5vw;\n  &:first-letter {\n    text-transform: capitalize;\n  }\n`;\n\nconst FirstAction = styled.span`\n  color: #ec433c;\n`;\n\nconst SecondAction = styled.span`\n  color: #2a48ec;\n`;\n\nconst Legend: FC<LegendProps> = ({ feature, firstAction, secondAction }) => {\n  return (\n    <Parent>\n      <Feature>{feature}</Feature>\n      <FlagComboParent>\n        <FirstAction>{firstAction}</FirstAction> +{' '}\n        <SecondAction>{secondAction}</SecondAction>\n      </FlagComboParent>\n    </Parent>\n  );\n};\n\nexport default Legend;\n","import styled from '@emotion/styled';\nimport { FC, memo } from 'react';\nimport { GameName, GameNameProps } from './GameName';\nimport Legend from './Legend';\nimport { LegendProps } from './Legend';\n\nconst Header = styled.header`\n  text-align: center;\n  position: relative;\n  display: inline-block;\n`;\n\nexport type TopComponentType = LegendProps & GameNameProps;\n\nexport const Top: FC<TopComponentType> = memo(\n  ({ name, children, ...legendProps }) => (\n    <Header>\n      <GameName name={name}>{children}</GameName>\n      <Legend {...legendProps} />\n    </Header>\n  )\n);\n\nTop.displayName = 'Top';\n","import { useState } from 'react';\n\nexport interface ReturnType {\n  isGameOver: boolean;\n  isWin: boolean;\n  isGameStarted: boolean;\n  setNewGame: () => void;\n  setInProgress: () => void;\n  setGameWin: () => void;\n  setGameLoose: () => void;\n}\n\nexport enum GameStatuses {\n  NewGame,\n  InProgress,\n  Win,\n  Loose,\n}\n\nexport const useStatus = (): ReturnType => {\n  const { NewGame, InProgress, Win, Loose } = GameStatuses;\n\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isWin, setIsWin] = useState(false);\n  const [isGameStarted, setIsGameStarted] = useState(false);\n\n  const setGameStatus = (status: GameStatuses) => {\n    setIsGameStarted(status === InProgress);\n    setIsWin(status === Win);\n    setIsGameOver(status === Win || status === Loose);\n  };\n\n  const setNewGame = () => setGameStatus(NewGame);\n  const setInProgress = () => setGameStatus(InProgress);\n  const setGameWin = () => setGameStatus(Win);\n  const setGameLoose = () => setGameStatus(Loose);\n\n  return {\n    isGameOver,\n    isWin,\n    isGameStarted,\n    setNewGame,\n    setInProgress,\n    setGameWin,\n    setGameLoose,\n  };\n};\n","import { useEffect, useState } from 'react';\n\nexport const useTime = (\n  isGameStarted: boolean,\n  isGameOver: boolean\n): [number, () => void] => {\n  const [time, setTime] = useState(0);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (isGameStarted) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 1);\n      }, 1000);\n\n      if (isGameOver) {\n        clearInterval(interval);\n      }\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isGameOver, isGameStarted, time]);\n\n  const onReset = () => setTime(0);\n\n  return [time, onReset];\n};\n","import { useState } from 'react';\nimport { GameSettings, LevelNames, Settings } from '../GameSettings';\n\ninterface Return {\n  settings: Settings;\n  level: LevelNames;\n  setLevel: (level: LevelNames) => Settings;\n}\n\nexport const useSettings = (\n  defaultLevel = 'easy' as LevelNames\n): Return => {\n  const [level, setLevel] = useState<LevelNames>(defaultLevel);\n  const settings = GameSettings[level];\n\n  return {\n    settings,\n    level,\n    setLevel: (level) => {\n      setLevel(level);\n      return GameSettings[level];\n    },\n  };\n};","import { FC, useCallback } from 'react';\nimport { GameLevels, LevelNames } from '../GameSettings';\nimport { Scoreboard } from '../../components/Scoreboard/Scoreboard';\nimport { GameOver } from '../../components/Game/GameOver';\nimport { Grid } from '../../components/Grid/Grid';\nimport { useGame } from './useGame';\nimport { useSearchParams } from 'react-router-dom';\n\nexport const GameWithHooks: FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const urlLevelParam = (searchParams.get('level') || undefined) as LevelNames;\n\n  const {\n    level,\n    isGameOver,\n    isWin,\n    settings,\n    playerField,\n    onClick,\n    onChangeLevel,\n    onReset,\n    onContextMenu,\n    time,\n  } = useGame(urlLevelParam);\n\n  const [, bombs] = settings;\n\n  const onChangeLevelHandler = useCallback(\n    ({ target: { value: level } }: React.ChangeEvent<HTMLSelectElement>) => {\n      setSearchParams({ level });\n      onChangeLevel(level as LevelNames);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return (\n    <>\n      <Scoreboard\n        time={String(time)}\n        mines={String(bombs)}\n        levels={GameLevels as unknown as string[]}\n        defaultLevel={level}\n        onChangeLevel={onChangeLevelHandler}\n        onReset={onReset}\n      />\n      {isGameOver && <GameOver onClick={onReset} isWin={isWin} />}\n      <Grid onClick={onClick} onContextMenu={onContextMenu}>\n        {playerField}\n      </Grid>\n    </>\n  );\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useCallback } from 'react';\nimport { GameSettings, LevelNames } from '../GameSettings';\nimport {\n  CellState,\n  generateFieldWithDefaultState,\n  fieldGenerator,\n} from '../../core/Field';\nimport { Coords, Field } from '../../core/Field';\nimport { setFlag } from '../../core/setFlag';\nimport { openCell } from '../../core/OpenCell';\nimport { useTime } from './useTime';\nimport { useStatus } from './useStatus';\nimport { useSettings } from './useSettings';\n\ninterface ReturnType {\n  level: LevelNames;\n  isGameOver: boolean;\n  isWin: boolean;\n  settings: [number, number];\n  playerField: Field;\n  onClick: (coords: Coords) => void;\n  onChangeLevel: (level: LevelNames) => void;\n  onReset: () => void;\n  gameField: Field;\n  onContextMenu: (coords: Coords) => void;\n  time: number;\n  flagCounter: number;\n  isGameStarted: boolean;\n}\n\nexport const useGame = (defaultLevel = 'easy' as LevelNames): ReturnType => {\n  const {\n    settings: [size, bombs],\n    level,\n    setLevel,\n  } = useSettings(defaultLevel);\n\n  const {\n    isGameOver,\n    isWin,\n    isGameStarted,\n    setNewGame,\n    setInProgress,\n    setGameWin,\n    setGameLoose,\n  } = useStatus();\n  const [flagCounter, setFlagCounter] = useState(0);\n  const [time, resetTime] = useTime(isGameStarted, isGameOver);\n\n  const [playerField, setPlayerField] = useState<Field>(\n    generateFieldWithDefaultState(size, CellState.hidden)\n  );\n\n  const [gameField, setGameField] = useState<Field>(\n    fieldGenerator(size, bombs / (size * size))\n  );\n\n  const onClick = useCallback(\n    (coords: Coords) => {\n      !isGameStarted && setInProgress();\n      if (isGameOver) return;\n      try {\n        const [newPlayerField, isSolved] = openCell(\n          coords,\n          playerField,\n          gameField\n        );\n\n        if (isSolved) {\n          setGameWin();\n        }\n        setPlayerField([...newPlayerField]);\n      } catch (e) {\n        setPlayerField([...gameField]);\n        setGameLoose();\n      }\n    },\n    [\n      isGameOver,\n      isGameStarted,\n      isWin,\n      level,\n      flagCounter,\n      playerField,\n      gameField,\n    ]\n  );\n\n  const onContextMenu = useCallback(\n    (coords: Coords) => {\n      !isGameStarted && setInProgress();\n      const [newPlayerField, isSolved, newFlagCounter] = setFlag(\n        coords,\n        playerField,\n        gameField,\n        flagCounter,\n        bombs\n      );\n\n      setFlagCounter(newFlagCounter);\n\n      if (isSolved) {\n        setGameWin();\n      }\n      setPlayerField([...newPlayerField]);\n    },\n    [\n      isGameStarted,\n      isGameOver,\n      isWin,\n      level,\n      flagCounter,\n      gameField,\n      playerField,\n    ]\n  );\n\n  const resetHandler = ([size, bombs]: [number, number]) => {\n    const newGameField = fieldGenerator(size, bombs / (size * size));\n    const newPlayerField = generateFieldWithDefaultState(\n      size,\n      CellState.hidden\n    );\n\n    setGameField([...newGameField]);\n    setPlayerField([...newPlayerField]);\n    setNewGame();\n    resetTime();\n    setFlagCounter(0);\n  };\n\n  const onChangeLevel = useCallback((level: LevelNames) => {\n    setLevel(level as LevelNames);\n    const newSettings = GameSettings[level as LevelNames];\n    resetHandler(newSettings);\n  }, []);\n\n  const onReset = useCallback(() => resetHandler([size, bombs]), [size, bombs]);\n\n  return {\n    level,\n    isGameOver,\n    isWin,\n    settings: [size, bombs],\n    playerField,\n    onClick,\n    onChangeLevel,\n    onReset,\n    gameField,\n    onContextMenu,\n    time,\n    flagCounter,\n    isGameStarted,\n  };\n};\n","import { FC } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { GameLayout } from '../../components/Game/GameLayout';\nimport { Top } from '../../components/Top/Top';\nimport { GameWithHooks } from '../../modules/GameWithHooks';\n\nexport const MinesweeperWithHooks: FC = () => {\n  const { username } = useParams<{ username?: string }>();\n\n  const [searchParams] = useSearchParams();\n  const id = searchParams.get('id');\n  return (\n    <GameLayout\n      top={\n        <Top\n          name=\"Minesweeper with ReactHooks\"\n          feature=\"Flag\"\n          firstAction=\"right\"\n          secondAction=\"click\"\n        >\n          {username && `${username}`}\n          {id && `; userId:${id}`}\n        </Top>\n      }\n    >\n      <GameWithHooks />\n    </GameLayout>\n  );\n};\n"],"names":["GameLayout","top","children","GameNameHeader","styled","GameName","name","Parent","FlagComboParent","Feature","FirstAction","SecondAction","feature","firstAction","secondAction","Header","Top","memo","legendProps","displayName","GameStatuses","useTime","isGameStarted","isGameOver","useState","time","setTime","useEffect","interval","setInterval","prevTime","clearInterval","useStatus","NewGame","InProgress","Win","Loose","setIsGameOver","isWin","setIsWin","setIsGameStarted","setGameStatus","status","setNewGame","setInProgress","setGameWin","setGameLoose","useSettings","defaultLevel","level","setLevel","settings","GameSettings","GameWithHooks","useSearchParams","searchParams","setSearchParams","size","bombs","flagCounter","setFlagCounter","resetTime","generateFieldWithDefaultState","CellState","playerField","setPlayerField","fieldGenerator","gameField","setGameField","onClick","useCallback","coords","openCell","newPlayerField","e","onContextMenu","setFlag","isSolved","newFlagCounter","resetHandler","newGameField","onChangeLevel","newSettings","onReset","useGame","get","undefined","onChangeLevelHandler","target","value","Scoreboard","String","mines","levels","GameLevels","GameOver","Grid","MinesweeperWithHooks","username","useParams","id"],"sourceRoot":""}