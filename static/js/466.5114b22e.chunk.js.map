{"version":3,"file":"static/js/466.5114b22e.chunk.js","mappings":"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","sources":["components/Game/GameLayout.tsx","components/Top/GameName.tsx","components/Top/Legend.tsx","components/Top/Top.tsx","modules/GameWithUseReducer/game.ts","modules/GameWithUseReducer/GameWithUseReducer.tsx","pages/MineSweeperWithUseReducer/MinesweeperWithUseReducer.tsx"],"sourcesContent":["import { FC, ReactNode } from 'react';\nimport { GameArea } from './GameArea';\nimport { Wrapper } from './Wrapper';\n\nexport interface Props {\n  top: ReactNode;\n  children: ReactNode;\n}\n\nexport const GameLayout: FC<Props> = ({ top, children }) => (\n  <Wrapper>\n    {top}\n    <GameArea>{children}</GameArea>\n  </Wrapper>\n);\n","import styled from '@emotion/styled';\nimport { FC, ReactNode } from 'react';\n\nexport interface GameNameProps {\n  name: string;\n  children?: ReactNode;\n}\n\nconst GameNameHeader = styled.h1`\n  font-size: 2em;\n`;\n\nexport const GameName: FC<GameNameProps> = ({ name, children }) => {\n  return (\n    <GameNameHeader>\n      {name}\n      , {children}\n    </GameNameHeader>\n  );\n};\n","import React, { FC } from 'react';\nimport styled from '@emotion/styled';\n\nexport interface LegendProps {\n  feature: string;\n  firstAction: string;\n  secondAction: string;\n}\n\nexport const Parent = styled.legend`\n  font-size: 1em;\n  margin: 0 auto 2vw;\n  line-height: 1.25em;\n`;\n\nconst FlagComboParent = styled.code`\n  background: #e3e3e3;\n`;\n\nconst Feature = styled.span`\n  font-weight: 700;\n  display: inline-block;\n  margin-right: 0.5vw;\n  &:first-letter {\n    text-transform: capitalize;\n  }\n`;\n\nconst FirstAction = styled.span`\n  color: #ec433c;\n`;\n\nconst SecondAction = styled.span`\n  color: #2a48ec;\n`;\n\nconst Legend: FC<LegendProps> = ({ feature, firstAction, secondAction }) => {\n  return (\n    <Parent>\n      <Feature>{feature}</Feature>\n      <FlagComboParent>\n        <FirstAction>{firstAction}</FirstAction> +{' '}\n        <SecondAction>{secondAction}</SecondAction>\n      </FlagComboParent>\n    </Parent>\n  );\n};\n\nexport default Legend;\n","import styled from '@emotion/styled';\nimport { FC, memo } from 'react';\nimport { GameName, GameNameProps } from './GameName';\nimport Legend from './Legend';\nimport { LegendProps } from './Legend';\n\nconst Header = styled.header`\n  text-align: center;\n  position: relative;\n  display: inline-block;\n`;\n\nexport type TopComponentType = LegendProps & GameNameProps;\n\nexport const Top: FC<TopComponentType> = memo(\n  ({ name, children, ...legendProps }) => (\n    <Header>\n      <GameName name={name}>{children}</GameName>\n      <Legend {...legendProps} />\n    </Header>\n  )\n);\n\nTop.displayName = 'Top';\n","import { CellState, Coords, Field } from '../../core/Field';\nimport { LevelNames, GameSettings } from '../GameSettings';\nimport { generateFieldWithDefaultState } from '../../core/Field';\nimport { fieldGenerator } from '../../core/Field';\nimport { AnyAction } from 'redux';\nimport { openCell as openCellHandler } from '../../core/OpenCell';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { setFlag } from '../../core/setFlag';\n\nexport interface State {\n  level: LevelNames;\n  time: number;\n  bombs: number;\n  isGameOver: boolean;\n  isGameStarted: boolean;\n  isWin: boolean;\n  settings: [number, number];\n  playerField: Field;\n  gameField: Field;\n  flagCounter: number;\n}\n\nexport const getInitialState = (level = 'easy' as LevelNames): State => {\n  const settings = GameSettings[level];\n  const [size, bombs] = settings;\n\n  return {\n    level,\n    time: 0,\n    bombs,\n    isGameOver: false,\n    isGameStarted: false,\n    isWin: false,\n    settings,\n    flagCounter: 0,\n    playerField: generateFieldWithDefaultState(size, CellState.hidden),\n    gameField: fieldGenerator(size, bombs / (size * size)),\n  };\n};\n\n// actions\nconst OPEN_CELL = 'modules/GameWithRedux/OPEN_CELL';\n\n// action creators\nexport const openCell = (coords: Coords): AnyAction => ({\n  type: OPEN_CELL,\n  payload: { coords },\n});\n\nexport const { reducer, actions } = createSlice({\n  name: 'game',\n  initialState: getInitialState(),\n  reducers: {\n    openCell: (state, { payload }: PayloadAction<Coords>) => {\n      const { playerField, gameField } = state;\n\n      try {\n        const [newPlayerField, isSolved] = openCellHandler(\n          payload,\n          playerField,\n          gameField\n        );\n\n        state.isGameStarted = !isSolved;\n        state.isGameOver = isSolved;\n        state.isWin = isSolved;\n        state.playerField = newPlayerField;\n      } catch (e) {\n        state.isGameOver = true;\n        state.isGameStarted = false;\n        state.isWin = false;\n        state.playerField = gameField;\n      }\n    },\n    setFlag: (state, { payload }: PayloadAction<Coords>) => {\n      const { playerField, gameField, flagCounter, bombs } = state;\n      const [newPlayerField, isSolved, newFlagCounter] = setFlag(\n        payload,\n        playerField,\n        gameField,\n        flagCounter,\n        bombs\n      );\n\n      state.isGameStarted = !isSolved;\n      state.isGameOver = isSolved;\n      state.isWin = isSolved;\n      state.flagCounter = newFlagCounter;\n      state.playerField = newPlayerField;\n    },\n    reset: ({ level }) => getInitialState(level),\n    changeLevel: (state, { payload }: PayloadAction<LevelNames>) =>\n      getInitialState(payload),\n  },\n});\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { FC, useCallback, useReducer } from 'react';\nimport { GameLevels, LevelNames } from '../GameSettings';\nimport { Scoreboard } from '../../components/Scoreboard/Scoreboard';\nimport { GameOver } from '../../components/Game/GameOver';\nimport { Grid } from '../../components/Grid/Grid';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { reducer, actions, getInitialState } from './game';\nimport { Coords } from '../../core/Field';\n\nexport const GameWithUseReducer: FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const urlLevelParam = (searchParams.get('level') || undefined) as LevelNames;\n\n  const [{ level, isGameOver, isWin, settings, playerField, time }, dispatch] =\n    useReducer(reducer, getInitialState(urlLevelParam));\n\n  const [, bombs] = settings;\n\n  const onClick = useCallback(\n    (coords: Coords) => dispatch(actions.openCell(coords as unknown as Coords)),\n    []\n  );\n\n  const onChangeLevelHandler = useCallback(\n    ({ target: { value: level } }: React.ChangeEvent<HTMLSelectElement>) => {\n      setSearchParams(level);\n      dispatch(actions.changeLevel(level as LevelNames));\n    },\n    []\n  );\n\n  const onContextMenu = useCallback(\n    (coords: Coords) => dispatch(actions.setFlag(coords as unknown as Coords)),\n    []\n  );\n\n  const onReset = useCallback(() => dispatch(actions.reset()), []);\n\n  return (\n    <>\n      <Scoreboard\n        time={String(time)}\n        mines={String(bombs)}\n        levels={GameLevels as unknown as string[]}\n        defaultLevel={level}\n        onChangeLevel={onChangeLevelHandler}\n        onReset={onReset}\n      />\n      {isGameOver && <GameOver onClick={onReset} isWin={isWin} />}\n      <Grid onClick={onClick} onContextMenu={onContextMenu}>\n        {playerField}\n      </Grid>\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { GameLayout } from '../../components/Game/GameLayout';\nimport { GameWithUseReducer } from '../../modules/GameWithUseReducer';\nimport { Top } from '../../components/Top/Top';\n\nexport const MinesweeperWithUseReducer: FC = () => {\n  return (\n    <GameLayout\n      top={\n        <Top\n          name=\"Minesweeper with useReducer\"\n          feature=\"Flag\"\n          firstAction=\"right\"\n          secondAction=\"click\"\n        />\n      }\n    >\n      <GameWithUseReducer />\n    </GameLayout>\n  );\n};\n"],"names":["GameLayout","top","children","GameNameHeader","styled","GameName","name","Parent","FlagComboParent","Feature","FirstAction","SecondAction","feature","firstAction","secondAction","Header","Top","memo","legendProps","displayName","getInitialState","level","settings","GameSettings","size","bombs","time","isGameOver","isGameStarted","isWin","flagCounter","playerField","generateFieldWithDefaultState","CellState","gameField","fieldGenerator","createSlice","initialState","reducers","openCell","state","payload","openCellHandler","newPlayerField","isSolved","e","setFlag","newFlagCounter","reset","changeLevel","reducer","actions","GameWithUseReducer","useSearchParams","searchParams","setSearchParams","urlLevelParam","get","undefined","useReducer","dispatch","onClick","useCallback","coords","onChangeLevelHandler","target","value","onContextMenu","onReset","Scoreboard","String","mines","levels","GameLevels","defaultLevel","onChangeLevel","GameOver","Grid","MinesweeperWithUseReducer"],"sourceRoot":""}